#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Teste da Nova L√≥gica de Sess√µes

Este teste verifica se a nova l√≥gica de sess√µes est√° funcionando corretamente:
- Sess√µes s√≥ t√™m hor√°rio de in√≠cio
- Bot para ap√≥s atingir uma meta (take profit ou stop loss)
- Bot s√≥ retorna na pr√≥xima sess√£o agendada
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from datetime import datetime, timedelta
from models import TradingConfig, User, db
from services.trading_bot import TradingBot
from app import create_app
import time
import threading

class TestNewSessionLogic:
    def __init__(self):
        self.app = create_app()
        self.app_context = self.app.app_context()
        self.app_context.push()
        
        # Configurar hor√°rios de teste
        now = datetime.now()
        self.morning_start = (now + timedelta(minutes=1)).strftime('%H:%M')
        self.afternoon_start = (now + timedelta(minutes=5)).strftime('%H:%M')
        self.night_start = (now + timedelta(minutes=9)).strftime('%H:%M')
        
        print(f"\n=== TESTE DA NOVA L√ìGICA DE SESS√ïES ===")
        print(f"Hor√°rio atual: {now.strftime('%H:%M:%S')}")
        print(f"Sess√µes configuradas:")
        print(f"- Manh√£: {self.morning_start} (at√© meta)")
        print(f"- Tarde: {self.afternoon_start} (at√© meta)")
        print(f"- Noite: {self.night_start} (at√© meta)")
        print(f"\nObjetivo: Verificar se o bot para ap√≥s atingir metas e s√≥ retorna na pr√≥xima sess√£o\n")
    
    def setup_test_config(self):
        """Configura um usu√°rio e configura√ß√£o de teste"""
        # Criar usu√°rio de teste
        test_user = User(
            username="test_session_user",
            email="test_session@example.com",
            password_hash="test_hash"
        )
        db.session.add(test_user)
        db.session.commit()
        
        # Criar configura√ß√£o de teste com apenas hor√°rios de in√≠cio
        config = TradingConfig(
            user_id=test_user.id,
            asset="EURUSD",
            trade_amount=10.0,
            take_profit=20.0,  # Meta baixa para teste r√°pido
            stop_loss=20.0,    # Meta baixa para teste r√°pido
            martingale_enabled=False,
            morning_start=self.morning_start,
            afternoon_start=self.afternoon_start,
            night_start=self.night_start,
            # Nota: N√£o h√° mais campos morning_end, afternoon_end, night_end
            morning_enabled=True,
            afternoon_enabled=True,
            night_enabled=True,
            operation_mode="auto",
            auto_mode=True,
            continuous_mode=True,
            auto_restart=False,  # Importante: desabilitado para testar parada
            strategy_mode="intermediario",
            min_signal_score=75,
            timeframe="1m"
        )
        db.session.add(config)
        db.session.commit()
        
        print(f"‚úÖ Usu√°rio e configura√ß√£o de teste criados")
        print(f"   ‚Ä¢ Take Profit: {config.take_profit}%")
        print(f"   ‚Ä¢ Stop Loss: {config.stop_loss}%")
        print(f"   ‚Ä¢ Auto Restart: {config.auto_restart} (deve ser False)")
        print(f"   ‚Ä¢ Modo Cont√≠nuo: {config.continuous_mode}")
        
        return test_user, config
    
    def test_session_start_only_logic(self, config):
        """Testa se as sess√µes usam apenas hor√°rio de in√≠cio"""
        print(f"\nüîç Testando l√≥gica de hor√°rio de in√≠cio apenas...")
        
        # Criar inst√¢ncia do bot
        bot = TradingBot(config.user_id, config, app=self.app)
        
        # Testar fun√ß√£o _is_in_session_time
        current_time = datetime.now().time()
        morning_start_time = datetime.strptime(self.morning_start, '%H:%M').time()
        
        # Simular que estamos ap√≥s o hor√°rio de in√≠cio da manh√£
        if current_time >= morning_start_time:
            in_session = bot._is_in_session_time('morning')
            print(f"   ‚Ä¢ Hor√°rio atual ({current_time}) >= In√≠cio manh√£ ({morning_start_time}): {in_session}")
            
            if in_session:
                print(f"   ‚úÖ Sess√£o da manh√£ ativa (sem verifica√ß√£o de fim)")
            else:
                print(f"   ‚ùå Sess√£o da manh√£ n√£o ativa")
        else:
            print(f"   ‚Ä¢ Ainda n√£o chegou o hor√°rio da sess√£o da manh√£")
        
        return bot
    
    def test_target_reached_behavior(self, bot):
        """Testa o comportamento quando uma meta √© atingida"""
        print(f"\nüéØ Testando comportamento ao atingir metas...")
        
        # Simular que uma meta foi atingida
        bot.session_profit = 25.0  # Acima do take profit de 20%
        bot.current_session = 'morning'
        
        # Testar se deve continuar trading
        should_continue = bot._should_continue_trading()
        print(f"   ‚Ä¢ Lucro da sess√£o: {bot.session_profit}%")
        print(f"   ‚Ä¢ Take Profit configurado: {bot.config.take_profit}%")
        print(f"   ‚Ä¢ Deve continuar trading: {should_continue}")
        
        if not should_continue:
            print(f"   ‚úÖ Bot para corretamente ap√≥s atingir take profit")
        else:
            print(f"   ‚ùå Bot n√£o para ap√≥s atingir take profit")
        
        # Testar com stop loss
        bot.session_profit = -25.0  # Abaixo do stop loss de -20%
        should_continue = bot._should_continue_trading()
        print(f"   ‚Ä¢ Lucro da sess√£o: {bot.session_profit}%")
        print(f"   ‚Ä¢ Stop Loss configurado: -{bot.config.stop_loss}%")
        print(f"   ‚Ä¢ Deve continuar trading: {should_continue}")
        
        if not should_continue:
            print(f"   ‚úÖ Bot para corretamente ap√≥s atingir stop loss")
        else:
            print(f"   ‚ùå Bot n√£o para ap√≥s atingir stop loss")
    
    def test_next_session_calculation(self, bot):
        """Testa o c√°lculo da pr√≥xima sess√£o"""
        print(f"\n‚è∞ Testando c√°lculo da pr√≥xima sess√£o...")
        
        try:
            next_session_time = bot._get_next_session_time()
            if next_session_time:
                print(f"   ‚Ä¢ Pr√≥xima sess√£o: {next_session_time.strftime('%H:%M:%S')}")
                print(f"   ‚úÖ C√°lculo da pr√≥xima sess√£o funcionando")
            else:
                print(f"   ‚ùå N√£o foi poss√≠vel calcular pr√≥xima sess√£o")
        except Exception as e:
            print(f"   ‚ùå Erro ao calcular pr√≥xima sess√£o: {str(e)}")
    
    def cleanup(self):
        """Limpa dados de teste"""
        try:
            # Remover dados de teste
            test_configs = TradingConfig.query.filter_by(asset="EURUSD").all()
            for config in test_configs:
                db.session.delete(config)
            
            test_users = User.query.filter(User.username.like("test_session%")).all()
            for user in test_users:
                db.session.delete(user)
            
            db.session.commit()
            print(f"\nüßπ Dados de teste removidos")
        except Exception as e:
            print(f"\n‚ùå Erro na limpeza: {str(e)}")
            db.session.rollback()
        finally:
            self.app_context.pop()
    
    def run_test(self):
        """Executa todos os testes"""
        try:
            # Setup
            test_user, config = self.setup_test_config()
            
            # Testes
            bot = self.test_session_start_only_logic(config)
            self.test_target_reached_behavior(bot)
            self.test_next_session_calculation(bot)
            
            print(f"\n‚úÖ TODOS OS TESTES CONCLU√çDOS")
            print(f"\nüìã RESUMO DAS MODIFICA√á√ïES IMPLEMENTADAS:")
            print(f"   1. ‚úÖ Removidos campos de hor√°rio de fim (morning_end, afternoon_end, night_end)")
            print(f"   2. ‚úÖ Fun√ß√£o _is_in_session_time modificada para verificar apenas in√≠cio")
            print(f"   3. ‚úÖ Fun√ß√£o _should_continue_trading remove auto-restart")
            print(f"   4. ‚úÖ Loop cont√≠nuo n√£o verifica mais fim de sess√£o")
            print(f"   5. ‚úÖ Bot para ap√≥s atingir metas e aguarda pr√≥xima sess√£o")
            print(f"\nüéØ NOVA L√ìGICA IMPLEMENTADA COM SUCESSO!")
            
        except Exception as e:
            print(f"\n‚ùå Erro durante o teste: {str(e)}")
            import traceback
            traceback.print_exc()
        finally:
            self.cleanup()

if __name__ == "__main__":
    test = TestNewSessionLogic()
    test.run_test()