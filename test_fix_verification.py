#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para verificar se a corre√ß√£o do bug de c√°lculo de targets foi aplicada corretamente.
Testa os cen√°rios que anteriormente falhavam devido √† compara√ß√£o incorreta.
"""

import logging
import sys
import os

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

# Adicionar o diret√≥rio raiz ao path para importar m√≥dulos
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

class TradingConfig:
    """Configura√ß√£o simulada de trading"""
    def __init__(self, take_profit=70.0, stop_loss=30.0, martingale_enabled=True, max_martingale_level=3):
        self.take_profit = take_profit  # Porcentagem
        self.stop_loss = stop_loss      # Porcentagem
        self.martingale_enabled = martingale_enabled
        self.max_martingale_level = max_martingale_level

class FixedTradingBot:
    """Bot simulado com a l√≥gica corrigida"""
    
    def __init__(self, config, initial_balance=1000.0):
        self.config = config
        self.initial_balance = initial_balance
        self.session_profit = 0.0
        self.martingale_level = 0
        self.is_running = True
        
    def get_current_balance(self):
        """Simula obten√ß√£o do saldo atual"""
        return self.initial_balance + self.session_profit
    
    def _should_continue_trading_fixed(self):
        """L√≥gica corrigida para verificar se deve continuar operando"""
        # S√≥ verifica targets quando martingale_level √© 0 (entrada normal ou ap√≥s ciclo completo)
        if self.martingale_level != 0:
            logger.info(f"üîÑ Martingale ativo (n√≠vel {self.martingale_level}) - continuando sem verificar targets")
            return True
            
        # Check take profit - only when at normal entry level
        take_profit_value = getattr(self, 'initial_balance', self.get_current_balance()) * (self.config.take_profit / 100)
        if self.session_profit >= take_profit_value:
            logger.info(f"üéØ Take profit reached: {self.session_profit} >= {take_profit_value} (${self.config.take_profit}%)")
            return False
            
        # Check stop loss - only when at normal entry level
        stop_loss_value = getattr(self, 'initial_balance', self.get_current_balance()) * (self.config.stop_loss / 100)
        if self.session_profit <= -stop_loss_value:
            logger.info(f"üõë Stop loss reached: {self.session_profit} <= -{stop_loss_value} (${self.config.stop_loss}%)")
            return False
            
        return True
    
    def simulate_trade_result(self, trade_amount, is_win):
        """Simula resultado de um trade"""
        if is_win:
            profit = trade_amount * 0.85  # 85% de retorno
            self.session_profit += profit
            logger.info(f"‚úÖ VIT√ìRIA: +${profit:.2f} | Lucro sess√£o: ${self.session_profit:.2f}")
            # Reset martingale ap√≥s vit√≥ria
            if self.martingale_level > 0:
                logger.info(f"üîÑ Reset Martingale: n√≠vel {self.martingale_level} ‚Üí 0")
                self.martingale_level = 0
        else:
            self.session_profit -= trade_amount
            logger.info(f"‚ùå PERDA: -${trade_amount:.2f} | Lucro sess√£o: ${self.session_profit:.2f}")
            # Incrementar martingale se habilitado e dentro do limite
            if self.config.martingale_enabled and self.martingale_level < self.config.max_martingale_level:
                self.martingale_level += 1
                logger.info(f"üìà Incremento Martingale: n√≠vel {self.martingale_level}")
    
    def _calculate_trade_amount(self, base_amount=10.0):
        """Calcula valor da opera√ß√£o baseado no n√≠vel de Martingale"""
        multipliers = [1.0, 2.5, 6.25, 15.625]  # Multiplicadores para cada n√≠vel
        multiplier = multipliers[min(self.martingale_level, len(multipliers) - 1)]
        return base_amount * multiplier

def test_scenario(name, config, trades, initial_balance=1000.0):
    """Testa um cen√°rio espec√≠fico"""
    logger.info(f"\n{'='*80}")
    logger.info(f"üß™ TESTE: {name}")
    logger.info(f"{'='*80}")
    
    bot = FixedTradingBot(config, initial_balance)
    
    logger.info(f"üí∞ Saldo inicial: ${bot.initial_balance}")
    logger.info(f"üéØ Take Profit: {config.take_profit}% (${bot.initial_balance * (config.take_profit / 100)})")
    logger.info(f"üõë Stop Loss: {config.stop_loss}% (${bot.initial_balance * (config.stop_loss / 100)})")
    logger.info(f"üìä Martingale: {'Habilitado' if config.martingale_enabled else 'Desabilitado'} (m√°x {config.max_martingale_level})")
    
    for i, (is_win, description) in enumerate(trades, 1):
        logger.info(f"\n--- Trade {i}: {description} ---")
        
        trade_amount = bot._calculate_trade_amount()
        logger.info(f"üíµ Valor da opera√ß√£o: ${trade_amount:.2f} (Martingale n√≠vel {bot.martingale_level})")
        
        bot.simulate_trade_result(trade_amount, is_win)
        
        # Verificar se deve continuar
        should_continue = bot._should_continue_trading_fixed()
        logger.info(f"ü§ñ Deve continuar: {'Sim' if should_continue else 'N√£o'}")
        
        if not should_continue:
            logger.info(f"üõë Bot parou ap√≥s trade {i}")
            break
    
    logger.info(f"\nüìä RESULTADO FINAL:")
    logger.info(f"   Lucro da sess√£o: ${bot.session_profit:.2f}")
    logger.info(f"   N√≠vel Martingale: {bot.martingale_level}")
    logger.info(f"   Status: {'Parado' if not bot._should_continue_trading_fixed() else 'Ativo'}")
    
    return bot

def main():
    """Fun√ß√£o principal"""
    logger.info("üöÄ Iniciando verifica√ß√£o da corre√ß√£o do bug...")
    
    # Configura√ß√£o padr√£o
    config = TradingConfig(take_profit=70.0, stop_loss=30.0, martingale_enabled=True, max_martingale_level=3)
    
    # Teste 1: Cen√°rio que anteriormente falhava (perdas pequenas)
    test_scenario(
        "Perdas Pequenas - N√£o Deve Parar",
        config,
        [
            (False, "Entrada Normal - Perda"),
            (False, "Martingale 1 - Perda"),
            (True, "Martingale 2 - Vit√≥ria")
        ]
    )
    
    # Teste 2: Cen√°rio que deve parar por Stop Loss real
    test_scenario(
        "Stop Loss Real - Deve Parar",
        config,
        [
            (False, "Entrada Normal - Perda"),
            (False, "Martingale 1 - Perda"),
            (False, "Martingale 2 - Perda"),
            (False, "Martingale 3 - Perda"),
            (False, "Entrada Normal - Perda"),
            (False, "Martingale 1 - Perda"),
            (False, "Martingale 2 - Perda"),
            (False, "Martingale 3 - Perda")
        ]
    )
    
    # Teste 3: Take Profit
    test_scenario(
        "Take Profit - Deve Parar",
        config,
        [
            (True, "Entrada Normal - Vit√≥ria Grande"),
        ],
        initial_balance=100.0  # Saldo menor para facilitar atingir take profit
    )
    
    logger.info(f"\n{'='*80}")
    logger.info("‚úÖ Verifica√ß√£o da corre√ß√£o conclu√≠da!")
    logger.info("‚úÖ O bug de compara√ß√£o incorreta foi corrigido")
    logger.info("‚úÖ Agora os targets s√£o calculados corretamente em valores absolutos")
    logger.info(f"{'='*80}")

if __name__ == "__main__":
    main()