#!/usr/bin/env python3
"""
Script para corrigir o problema de continuous_mode e auto_restart
que estava causando o bot a continuar operando ap√≥s atingir stop loss.

Este script atualiza todas as configura√ß√µes existentes no banco de dados
para desabilitar continuous_mode e auto_restart por padr√£o.
"""

import sys
import os
from flask import Flask
from flask_sqlalchemy import SQLAlchemy

# Adicionar o diret√≥rio raiz ao path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from models import db, TradingConfig
from config import Config

def create_app():
    """Criar aplica√ß√£o Flask para acesso ao banco de dados"""
    app = Flask(__name__)
    
    # Configurar banco de dados diretamente
    app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///trading_bot.db'
    app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
    
    db.init_app(app)
    return app

def fix_continuous_mode_settings():
    """Corrigir configura√ß√µes de continuous_mode e auto_restart"""
    app = create_app()
    
    with app.app_context():
        try:
            # Buscar todas as configura√ß√µes que t√™m continuous_mode ou auto_restart ativados
            configs_to_update = TradingConfig.query.filter(
                (TradingConfig.continuous_mode == True) | 
                (TradingConfig.auto_restart == True)
            ).all()
            
            print(f"Encontradas {len(configs_to_update)} configura√ß√µes para atualizar...")
            
            updated_count = 0
            for config in configs_to_update:
                print(f"Atualizando configura√ß√£o do usu√°rio {config.user_id}:")
                print(f"  - continuous_mode: {config.continuous_mode} -> False")
                print(f"  - auto_restart: {config.auto_restart} -> False")
                
                # Atualizar as configura√ß√µes
                config.continuous_mode = False
                config.auto_restart = False
                updated_count += 1
            
            # Salvar as altera√ß√µes
            if updated_count > 0:
                db.session.commit()
                print(f"\n‚úÖ {updated_count} configura√ß√µes atualizadas com sucesso!")
                print("\nüîß CORRE√á√ÉO APLICADA:")
                print("   - continuous_mode = False (bot para ap√≥s atingir metas)")
                print("   - auto_restart = False (bot n√£o reinicia automaticamente)")
                print("\nüìã COMPORTAMENTO ESPERADO:")
                print("   - Quando take profit for atingido: bot para")
                print("   - Quando stop loss for atingido (3¬∫ martingale): bot para")
                print("   - Bot n√£o continua operando ap√≥s atingir metas")
            else:
                print("\n‚úÖ Nenhuma configura√ß√£o precisava ser atualizada.")
                
        except Exception as e:
            print(f"\n‚ùå Erro ao atualizar configura√ß√µes: {str(e)}")
            db.session.rollback()
            return False
            
    return True

def verify_fix():
    """Verificar se a corre√ß√£o foi aplicada corretamente"""
    app = create_app()
    
    with app.app_context():
        try:
            # Verificar se ainda h√° configura√ß√µes com continuous_mode ou auto_restart ativados
            problematic_configs = TradingConfig.query.filter(
                (TradingConfig.continuous_mode == True) | 
                (TradingConfig.auto_restart == True)
            ).all()
            
            if len(problematic_configs) == 0:
                print("\n‚úÖ VERIFICA√á√ÉO PASSOU: Todas as configura√ß√µes est√£o corretas!")
                return True
            else:
                print(f"\n‚ö†Ô∏è VERIFICA√á√ÉO FALHOU: {len(problematic_configs)} configura√ß√µes ainda t√™m problemas")
                for config in problematic_configs:
                    print(f"   Usu√°rio {config.user_id}: continuous_mode={config.continuous_mode}, auto_restart={config.auto_restart}")
                return False
                
        except Exception as e:
            print(f"\n‚ùå Erro na verifica√ß√£o: {str(e)}")
            return False

if __name__ == '__main__':
    print("üîß CORRE√á√ÉO DO SISTEMA DE PAUSA")
    print("=" * 50)
    print("\nüìã PROBLEMA IDENTIFICADO:")
    print("   O bot continuava operando ap√≥s atingir stop loss")
    print("   porque continuous_mode e auto_restart estavam ativados por padr√£o.")
    print("\nüîß SOLU√á√ÉO:")
    print("   Desabilitar continuous_mode e auto_restart para todas as configura√ß√µes.")
    print("\n" + "=" * 50)
    
    # Aplicar a corre√ß√£o
    if fix_continuous_mode_settings():
        print("\n" + "=" * 50)
        print("üîç VERIFICANDO A CORRE√á√ÉO...")
        verify_fix()
        print("\n" + "=" * 50)
        print("\nüéØ PR√ìXIMOS PASSOS:")
        print("   1. Reinicie o bot se estiver rodando")
        print("   2. Teste o comportamento com uma opera√ß√£o")
        print("   3. Verifique se o bot para ap√≥s atingir take profit ou stop loss")
        print("\n‚úÖ Corre√ß√£o conclu√≠da!")
    else:
        print("\n‚ùå Falha na aplica√ß√£o da corre√ß√£o. Verifique os logs de erro acima.")