# Script de Deploy para Vercel
# Execute este script no PowerShell para fazer o deploy automatizado

Write-Host "üöÄ Iniciando deploy na Vercel..." -ForegroundColor Green

# Verificar se o Vercel CLI est√° instalado
if (!(Get-Command "vercel" -ErrorAction SilentlyContinue)) {
    Write-Host "‚ùå Vercel CLI n√£o encontrado. Instalando..." -ForegroundColor Red
    npm install -g vercel
    if ($LASTEXITCODE -ne 0) {
        Write-Host "‚ùå Erro ao instalar Vercel CLI" -ForegroundColor Red
        exit 1
    }
}

# Verificar se est√° logado na Vercel
Write-Host "üîê Verificando login na Vercel..." -ForegroundColor Yellow
vercel whoami
if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ùå N√£o est√° logado na Vercel. Execute 'vercel login' primeiro" -ForegroundColor Red
    exit 1
}

# Verificar arquivos necess√°rios
Write-Host "üìã Verificando arquivos necess√°rios..." -ForegroundColor Yellow

$requiredFiles = @(
    "vercel.json",
    "api/index.py",
    "app_vercel.py",
    "requirements-vercel.txt",
    ".env.production"
)

foreach ($file in $requiredFiles) {
    if (!(Test-Path $file)) {
        Write-Host "‚ùå Arquivo necess√°rio n√£o encontrado: $file" -ForegroundColor Red
        exit 1
    }
    Write-Host "‚úÖ $file" -ForegroundColor Green
}

# Mostrar estrutura do projeto
Write-Host "\nüìÅ Estrutura do projeto:" -ForegroundColor Cyan
Get-ChildItem -Recurse -Directory | Where-Object { $_.Name -notmatch '^(__pycache__|.git|node_modules|venv|env)$' } | ForEach-Object {
    Write-Host "  üìÇ $($_.FullName.Replace($PWD.Path, '.'))/" -ForegroundColor Blue
}

# Perguntar sobre o tipo de deploy
Write-Host "\nüéØ Escolha o tipo de deploy:" -ForegroundColor Cyan
Write-Host "1. Deploy de desenvolvimento (preview)" -ForegroundColor White
Write-Host "2. Deploy de produ√ß√£o" -ForegroundColor White
$choice = Read-Host "Digite sua escolha (1 ou 2)"

switch ($choice) {
    "1" {
        Write-Host "\nüîß Fazendo deploy de desenvolvimento..." -ForegroundColor Yellow
        vercel
    }
    "2" {
        Write-Host "\nüöÄ Fazendo deploy de produ√ß√£o..." -ForegroundColor Green
        vercel --prod
    }
    default {
        Write-Host "‚ùå Op√ß√£o inv√°lida. Execute o script novamente." -ForegroundColor Red
        exit 1
    }
}

if ($LASTEXITCODE -eq 0) {
    Write-Host "\n‚úÖ Deploy conclu√≠do com sucesso!" -ForegroundColor Green
    Write-Host "\nüìä Para monitorar o deploy:" -ForegroundColor Cyan
    Write-Host "  ‚Ä¢ Acesse: https://vercel.com/dashboard" -ForegroundColor White
    Write-Host "  ‚Ä¢ Verifique os logs em tempo real" -ForegroundColor White
    Write-Host "  ‚Ä¢ Configure as vari√°veis de ambiente se necess√°rio" -ForegroundColor White
    
    Write-Host "\nüîß Comandos √∫teis:" -ForegroundColor Cyan
    Write-Host "  vercel logs <url>     - Ver logs do deploy" -ForegroundColor White
    Write-Host "  vercel env ls         - Listar vari√°veis de ambiente" -ForegroundColor White
    Write-Host "  vercel domains        - Gerenciar dom√≠nios" -ForegroundColor White
} else {
    Write-Host "\n‚ùå Erro durante o deploy. Verifique os logs acima." -ForegroundColor Red
    Write-Host "\nüîç Dicas para resolver problemas:" -ForegroundColor Yellow
    Write-Host "  ‚Ä¢ Verifique se todas as vari√°veis de ambiente est√£o configuradas" -ForegroundColor White
    Write-Host "  ‚Ä¢ Confirme que o requirements-vercel.txt est√° correto" -ForegroundColor White
    Write-Host "  ‚Ä¢ Teste localmente com: python app_vercel.py" -ForegroundColor White
    exit 1
}

Write-Host "\nüéâ Deploy finalizado!" -ForegroundColor Green