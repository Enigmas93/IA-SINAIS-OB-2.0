#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
CORRE√á√ÉO DO BUG IDENTIFICADO:

O problema est√° na compara√ß√£o dos targets de Take Profit e Stop Loss.
O c√≥digo est√° comparando session_profit (valor em d√≥lares) diretamente com
config.take_profit e config.stop_loss (valores em porcentagem).

EXEMPLO DO PROBLEMA:
- session_profit = -373.76 (d√≥lares)
- config.stop_loss = 30.0 (porcentagem)
- Compara√ß√£o: -373.76 <= -30.0 = True (INCORRETO!)

DEVERIA SER:
- session_profit = -373.76 (d√≥lares)
- stop_loss_value = 1000.0 * (30.0 / 100) = 300.0 (d√≥lares)
- Compara√ß√£o: -373.76 <= -300.0 = True (CORRETO!)
"""

import logging
from datetime import datetime

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

def demonstrate_bug():
    """Demonstra o bug na compara√ß√£o de targets"""
    logger.info("\n" + "=" * 80)
    logger.info("üêõ DEMONSTRA√á√ÉO DO BUG IDENTIFICADO")
    logger.info("=" * 80)
    
    # Valores t√≠picos do cen√°rio problem√°tico
    initial_balance = 1000.0
    session_profit = -373.76  # Ap√≥s 4 perdas consecutivas
    take_profit_config = 70.0  # 70% (porcentagem)
    stop_loss_config = 30.0    # 30% (porcentagem)
    
    logger.info(f"üí∞ Saldo inicial: ${initial_balance}")
    logger.info(f"üìä Lucro da sess√£o: ${session_profit}")
    logger.info(f"üéØ Take Profit configurado: {take_profit_config}% (interface)")
    logger.info(f"üõë Stop Loss configurado: {stop_loss_config}% (interface)")
    
    # COMPARA√á√ÉO INCORRETA (como est√° no c√≥digo atual)
    logger.info("\n‚ùå COMPARA√á√ÉO INCORRETA (c√≥digo atual):")
    take_profit_reached_wrong = session_profit >= take_profit_config
    stop_loss_reached_wrong = session_profit <= -stop_loss_config
    
    logger.info(f"   Take Profit: {session_profit} >= {take_profit_config} = {take_profit_reached_wrong}")
    logger.info(f"   Stop Loss: {session_profit} <= -{stop_loss_config} = {stop_loss_reached_wrong}")
    
    if stop_loss_reached_wrong:
        logger.error(f"   üö® BUG: Stop Loss atingido incorretamente!")
        logger.error(f"   üö® Comparando ${session_profit} com -{stop_loss_config}% ao inv√©s de valor em d√≥lares")
    
    # COMPARA√á√ÉO CORRETA
    logger.info("\n‚úÖ COMPARA√á√ÉO CORRETA (como deveria ser):")
    take_profit_value = initial_balance * (take_profit_config / 100)  # $700
    stop_loss_value = initial_balance * (stop_loss_config / 100)      # $300
    
    take_profit_reached_correct = session_profit >= take_profit_value
    stop_loss_reached_correct = session_profit <= -stop_loss_value
    
    logger.info(f"   Take Profit valor: ${take_profit_value} (70% de ${initial_balance})")
    logger.info(f"   Stop Loss valor: ${stop_loss_value} (30% de ${initial_balance})")
    logger.info(f"   Take Profit: {session_profit} >= {take_profit_value} = {take_profit_reached_correct}")
    logger.info(f"   Stop Loss: {session_profit} <= -{stop_loss_value} = {stop_loss_reached_correct}")
    
    if stop_loss_reached_correct:
        logger.info(f"   ‚úÖ Stop Loss atingido corretamente!")
        logger.info(f"   ‚úÖ Perda de ${abs(session_profit)} excedeu limite de ${stop_loss_value}")
    else:
        logger.info(f"   ‚úÖ Stop Loss N√ÉO atingido - bot deve continuar")
        logger.info(f"   ‚úÖ Perda de ${abs(session_profit)} ainda dentro do limite de ${stop_loss_value}")
    
    return {
        'bug_detected': stop_loss_reached_wrong and not stop_loss_reached_correct,
        'correct_take_profit': take_profit_reached_correct,
        'correct_stop_loss': stop_loss_reached_correct,
        'take_profit_value': take_profit_value,
        'stop_loss_value': stop_loss_value
    }

def test_various_scenarios():
    """Testa v√°rios cen√°rios para confirmar o bug"""
    logger.info("\n" + "=" * 80)
    logger.info("üß™ TESTE DE V√ÅRIOS CEN√ÅRIOS")
    logger.info("=" * 80)
    
    initial_balance = 1000.0
    take_profit_config = 70.0  # 70%
    stop_loss_config = 30.0    # 30%
    
    take_profit_value = initial_balance * (take_profit_config / 100)  # $700
    stop_loss_value = initial_balance * (stop_loss_config / 100)      # $300
    
    scenarios = [
        (-50.0, "Perda pequena"),
        (-150.0, "Perda moderada"),
        (-250.0, "Perda pr√≥xima ao limite"),
        (-300.0, "Perda exata no limite"),
        (-350.0, "Perda acima do limite"),
        (-373.76, "Cen√°rio real do problema"),
        (100.0, "Lucro pequeno"),
        (500.0, "Lucro moderado"),
        (700.0, "Lucro no limite"),
        (800.0, "Lucro acima do limite")
    ]
    
    for session_profit, description in scenarios:
        logger.info(f"\nüìä {description}: ${session_profit}")
        
        # Compara√ß√£o incorreta
        wrong_tp = session_profit >= take_profit_config
        wrong_sl = session_profit <= -stop_loss_config
        
        # Compara√ß√£o correta
        correct_tp = session_profit >= take_profit_value
        correct_sl = session_profit <= -stop_loss_value
        
        logger.info(f"   C√≥digo atual: TP={wrong_tp}, SL={wrong_sl}")
        logger.info(f"   C√≥digo correto: TP={correct_tp}, SL={correct_sl}")
        
        if wrong_tp != correct_tp or wrong_sl != correct_sl:
            logger.error(f"   üö® DISCREP√ÇNCIA DETECTADA!")
            if wrong_sl and not correct_sl:
                logger.error(f"   üö® Stop Loss acionado incorretamente pelo c√≥digo atual")
            elif not wrong_sl and correct_sl:
                logger.error(f"   üö® Stop Loss N√ÉO acionado quando deveria pelo c√≥digo atual")

def show_code_locations():
    """Mostra onde o bug est√° localizado no c√≥digo"""
    logger.info("\n" + "=" * 80)
    logger.info("üìç LOCALIZA√á√ÉO DO BUG NO C√ìDIGO")
    logger.info("=" * 80)
    
    locations = [
        {
            'file': 'services/trading_bot.py',
            'line': '558',
            'code': 'if self.session_profit >= self.config.take_profit:',
            'fix': 'if self.session_profit >= (self.initial_balance * (self.config.take_profit / 100)):'
        },
        {
            'file': 'services/trading_bot.py',
            'line': '574',
            'code': 'if self.session_profit <= -self.config.stop_loss:',
            'fix': 'if self.session_profit <= -(self.initial_balance * (self.config.stop_loss / 100)):'
        },
        {
            'file': 'services/trading_bot.py',
            'line': '948',
            'code': 'if self.session_profit >= self.config.take_profit:',
            'fix': 'if self.session_profit >= (self.initial_balance * (self.config.take_profit / 100)):'
        },
        {
            'file': 'services/trading_bot.py',
            'line': '978',
            'code': 'if self.session_profit <= -self.config.stop_loss:',
            'fix': 'if self.session_profit <= -(self.initial_balance * (self.config.stop_loss / 100)):'
        },
        {
            'file': 'services/trading_bot.py',
            'line': '1004-1005',
            'code': 'take_profit_reached = self.session_profit >= self.config.take_profit\nstop_loss_reached = self.session_profit <= -self.config.stop_loss',
            'fix': 'take_profit_reached = self.session_profit >= (self.initial_balance * (self.config.take_profit / 100))\nstop_loss_reached = self.session_profit <= -(self.initial_balance * (self.config.stop_loss / 100))'
        }
    ]
    
    for i, location in enumerate(locations, 1):
        logger.info(f"\nüîç Localiza√ß√£o {i}:")
        logger.info(f"   Arquivo: {location['file']}")
        logger.info(f"   Linha: {location['line']}")
        logger.info(f"   ‚ùå C√≥digo atual: {location['code']}")
        logger.info(f"   ‚úÖ Corre√ß√£o: {location['fix']}")

def generate_fix_summary():
    """Gera um resumo da corre√ß√£o necess√°ria"""
    logger.info("\n" + "=" * 80)
    logger.info("üìã RESUMO DA CORRE√á√ÉO NECESS√ÅRIA")
    logger.info("=" * 80)
    
    logger.info("üêõ PROBLEMA IDENTIFICADO:")
    logger.info("   O c√≥digo est√° comparando session_profit (valor em d√≥lares) diretamente")
    logger.info("   com config.take_profit e config.stop_loss (valores em porcentagem).")
    logger.info("   Isso faz com que o bot pare prematuramente.")
    
    logger.info("\n‚úÖ SOLU√á√ÉO:")
    logger.info("   Converter os valores de porcentagem para valores absolutos em d√≥lares")
    logger.info("   antes de fazer a compara√ß√£o.")
    
    logger.info("\nüîß IMPLEMENTA√á√ÉO:")
    logger.info("   1. Calcular take_profit_value = initial_balance * (config.take_profit / 100)")
    logger.info("   2. Calcular stop_loss_value = initial_balance * (config.stop_loss / 100)")
    logger.info("   3. Comparar session_profit com esses valores calculados")
    
    logger.info("\nüìä EXEMPLO:")
    logger.info("   Saldo inicial: $1000")
    logger.info("   Take Profit: 70% = $700")
    logger.info("   Stop Loss: 30% = $300")
    logger.info("   Session profit: -$373.76")
    logger.info("   Resultado: Stop Loss atingido (-$373.76 <= -$300) ‚úÖ")
    
    logger.info("\nüéØ IMPACTO DA CORRE√á√ÉO:")
    logger.info("   - Bot n√£o ir√° mais parar prematuramente")
    logger.info("   - Targets ser√£o respeitados corretamente")
    logger.info("   - Martingale funcionar√° at√© os limites reais")

if __name__ == "__main__":
    logger.info("üöÄ Iniciando an√°lise do bug de c√°lculo de targets...")
    
    # Demonstrar o bug
    bug_result = demonstrate_bug()
    
    # Testar v√°rios cen√°rios
    test_various_scenarios()
    
    # Mostrar localiza√ß√µes no c√≥digo
    show_code_locations()
    
    # Gerar resumo da corre√ß√£o
    generate_fix_summary()
    
    logger.info("\n" + "=" * 80)
    logger.info("üéâ AN√ÅLISE CONCLU√çDA")
    logger.info("=" * 80)
    
    if bug_result['bug_detected']:
        logger.error("‚ùå BUG CONFIRMADO: Corre√ß√£o necess√°ria no c√≥digo")
    else:
        logger.info("‚úÖ Nenhum bug detectado neste cen√°rio espec√≠fico")
    
    logger.info("\nüìù PR√ìXIMOS PASSOS:")
    logger.info("   1. Aplicar as corre√ß√µes nos arquivos indicados")
    logger.info("   2. Testar com cen√°rios reais")
    logger.info("   3. Verificar se o problema foi resolvido")